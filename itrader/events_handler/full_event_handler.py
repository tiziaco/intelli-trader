import queue
from datetime import datetime


from itrader.strategy_handler.strategies_handler import StrategiesHandler
from itrader.screeners_handler.screeners_handler import ScreenersHandler
from itrader.order_handler.order_handler import OrderHandler
from itrader.portfolio_handler.portfolio_handler import PortfolioHandler
from itrader.execution_handler.execution_handler import ExecutionHandler
from itrader.universe.universe import Universe
from itrader.events_handler.event import EventType
from itrader import logger


class EventHandler(object):
	"""
	Encapsulates all components associated with the engine of the
	trading system. This includes the order handler (with its risk manager 
	and position sizer), the portfolio handler and the execution handler
	(with its transaction cost model).

	It process the signal coming from the strategy handler.

	Parameters
	----------
	price_handler : `PriceHandler`
		The data handler instance used for all market data.
	global_queue : `Queue`
		The global events queue of the trading system.
	"""

	def __init__(
		self,
		strategies_handler: StrategiesHandler,
		screeners_handler: ScreenersHandler,
		portfolio_handler: PortfolioHandler,
		order_handler: OrderHandler,
		execution_handler: ExecutionHandler,
		universe: Universe,
		global_queue: queue.Queue,
	):
		self.strategies_handler = strategies_handler
		self.screeners_handler = screeners_handler
		self.portfolio_handler = portfolio_handler
		self.order_handler = order_handler
		self.execution_handler = execution_handler
		self.universe = universe
		self.global_queue = global_queue

		logger.info('EVENT HANDLER: Full Event Handler => OK')

	def process_events(self):
		"""
		Process the Signal event generated by the Strategy module.
		First it get the signal from the engine queue and then it process
		it trough the Order handler, execution and portfolio handler.
		"""

		while not self.global_queue.empty() :
			try:
				event = self.global_queue.get(False)
			except queue.Empty:
				event = None
			if event.type == EventType.PING:
				logger.info(f"PING EVENT: {event.time}")
				self.screeners_handler.screen_markets(event)
				self.universe.generate_bar_event(event)
			elif event.type == EventType.BAR:
				self.portfolio_handler.update_portfolios_market_value(event)
				self.order_handler.check_pending_orders(event)
				self.strategies_handler.calculate_signals(event)
			# elif event.type == EventType.UPDATE:
			# 	self.strategies_handler.on_portfolio_update(event)
			# 	self.order_handler.on_portfolio_update(event)
			elif event.type == EventType.SIGNAL:
				self.order_handler.on_signal(event)
			elif event.type == EventType.ORDER:
				self.execution_handler.on_order(event)
			elif event.type == EventType.FILL:
				self.portfolio_handler.on_fill(event)
				#self.order_handler._delete_pending_orders(event)
			elif event.type == EventType.SCREENER:
				continue
			else:
				raise NotImplemented('EVENT HANDLER: Unsupported event type %s' % event.type)
