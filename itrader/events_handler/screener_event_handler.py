import queue
from datetime import datetime

from itrader.screeners_handler.screeners_handler import ScreenersHandler

from itrader.events_handler.event import EventType
from itrader import logger


class EventHandler(object):
	"""
	Encapsulates all components associated with the engine of the
	trading system. This includes the order handler (with its risk manager 
	and position sizer), the portfolio handler and the execution handler
	(with its transaction cost model).

	It process the signal coming from the strategy handler.

	Parameters
	----------
	price_handler : `PriceHandler`
		The data handler instance used for all market data.
	global_queue : `Queue`
		The global events queue of the trading system.
	"""

	def __init__(
		self,
		screeners_handler: ScreenersHandler,
		global_queue: queue.Queue,
	):
		self.screeners_handler = screeners_handler
		self.global_queue = global_queue

		logger.info('EVENT HANDLER: Screener Event Handler => OK')

	
	def process_events(self):
		"""
		Process the Signal event generated by the Strategy module.
		First it get the signal from the engine queue and then it process
		it trough the Order handler, execution and portfolio handler.
		"""

		while not self.global_queue.empty() :
			try:
				event = self.global_queue.get(False)
			except queue.Empty:
				event = None
			if event.type == EventType.PING:
				self.universe.generate_bars(event)
			elif event.type == EventType.BAR:
				self.screeners_handler.screen_markets(event)
			elif event.type == EventType.SIGNAL:
				continue
			else:
				raise NotImplemented('EVENT HANDLER: Unsupported event type %s' % event.type)
