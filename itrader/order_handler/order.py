from enum import Enum
from datetime import datetime
from dataclasses import dataclass

from itrader.events_handler.event import SignalEvent
from itrader import idgen

OrderType = Enum("OrderType", "MARKET STOP LIMIT")
OrderStatus = Enum("OrderStatus", "PENDING FILLED CANCELLED")

order_type_map = {
	"MARKET": OrderType.MARKET,
	"STOP": OrderType.STOP,
	"LIMIT": OrderType.LIMIT
}
order_status_map = {
	"PENDING": OrderStatus.PENDING,
	"FILLED": OrderStatus.FILLED,
	"CANCELLED": OrderStatus.CANCELLED
}

@dataclass
class Order:
	"""
	An Order object is generated by the OrderHandler in respons to
	a signal event who has been validated by the the PositionSizer 
	and RiskManager object.

	It is then sent to the ExecutionHandler who send the order
	to the exchange.
	"""

	time: datetime
	type: OrderType
	status: OrderStatus
	ticker: str
	action: str
	price: float
	quantity: float
	strategy_id: int
	portfolio_id: int
	id: int

	def __str__(self):
		return f"Order - {self.id} ({self.type.name}, {self.ticker}, {self.action}, {self.quantity}, {self.price}$)"

	def __repr__(self):
		return str(self)
	
	@classmethod
	def new_order(cls, signal: SignalEvent):
		"""
		Generate a new Order object from the signal valited from
		the risk manager and compliance manager.

		Parameters
		----------
		signal : `SignalEvent`
			The object representing the signal
		
		Returns
		-------
		Order : `OrderEvent`
			A new Order object with the specified type.
		"""
		order_type = order_type_map.get(signal.order_type.upper())
		if order_type is None:
			raise ValueError(f'OrderType {type} not supported')

		return cls(
			signal.time,
			order_type,
			OrderStatus.PENDING,
			signal.ticker,
			signal.action,
			signal.price,
			signal.quantity,
			signal.strategy_id,
			signal.portfolio_id,
			idgen.generate_order_id()
		)
	
	@classmethod
	def new_stop_order(cls, time, ticker, action, price, quantity,
					strategy_id, portfolio_id):
		"""
		Generate a new Stop Order object.

		Returns
		-------
		Order : `OrderEvent`
			A new Order object with the specified type.
		"""
		return cls(
			time,
			OrderType.STOP,
			OrderStatus.PENDING,
			ticker,
			action,
			price,
			quantity,
			strategy_id,
			portfolio_id,
			idgen.generate_order_id()
		)
	
	@classmethod
	def new_limit_order(cls, time, ticker, action, price, quantity,
					strategy_id, portfolio_id):
		"""
		Generate a new Stop Order object.

		Returns
		-------
		Order : `OrderEvent`
			A new Order object with the specified type.
		"""
		return cls(
			time,
			OrderType.LIMIT,
			OrderStatus.PENDING,
			ticker,
			action,
			price,
			quantity,
			strategy_id,
			portfolio_id,
			idgen.generate_order_id()
		)