from enum import Enum
import logging

logger = logging.getLogger()

OrderType = Enum("OrderType", "MARKET STOP LIMIT")

class SuggestedOrder(object):
    """
    A SuggestedOrder object is generated by the OrderHandler
    to be sent to the PositionSizer object and subsequently the
    RiskManager object. Creating a separate object type for
    suggested orders and final orders (OrderEvent objects) ensures
    that a suggested order is never transacted unless it has been
    scrutinised by the position sizing and risk management layers.
    """
    def __init__(self, time, type, ticker, action, price, quantity=0, sl=0, tp=0):
        """
        Initialises the SuggestedOrder. The quantity defaults
        to zero as the PortfolioHandler creates these objects
        prior to any position sizing.

        The PositionSizer object will "fill in" the correct
        value prior to sending the SuggestedOrder to the
        RiskManager.

        Parameters
        ----------
        time: `timestamp`
            Event time
        type: `str`
            Order type ('market', 'stop', 'limit')
        ticker: `str`
            The ticker symbol, e.g. 'BTCUSD'.
        action: `str`
            'BOT' (for long) or 'SLD' (for short)
        price: `float`
            Last close price for the instrument
        quantity: `float` or `int` (optional)
            The quantity of shares to transact.
        sl: `float` (optional)
            stop loss suggested price
        tp: `float` (optional)
            take profit suggested price
        """
        self.time = time
        self.type = type
        self.ticker = ticker
        self.action = action
        self.price = price
        self.quantity = quantity
        self.sl = sl
        self.tp = tp

class MarketOrder(object):
    """
    A Market order object is generated by the OrderHandler after
    the suggested order is validated by the RiskManager.
    It is executed later by the ExecutionHandler
    """
    def __init__(self, id, ticker, status, time, action, price, quantity=0):
        """
        Initialises the MarketOrder.
        The OrderManager object will "fill in" the correct
        value prior to sending the StopdOrder to the
        ExecutionHandler.

        Parameters:
        id - The order id
        ticker - The ticker symbol, e.g. 'GOOG'.
        status - Status of the order (Working, Inactive, Filled, Cancelled)
        time - Placing time
        action - 'BOT' (for long) or 'SLD' (for short)
            or 'EXIT' (for liquidation).
        price - Activation price
        quantity - The quantity of shares to transact.
        """
        self.type = OrderType.MARKET
        self.id = id
        self.ticker = ticker
        self.status = status
        self.time = time
        self.action = action
        self.price = price
        self.quantity = quantity

class StopOrder(object):
    """
    a Stop order is generated when trading with limit orders orders or
    when a stop loss or take profit is defined.
    """
    def __init__(self, id, ticker, status, time, action, price, quantity=0):
        """
        Initialises the StopOrder.
        The OrderManager object will "fill in" the correct
        value prior to sending the StopdOrder to the
        ExecutionHandler.

        Parameters:
        id - The order id
        ticker - The ticker symbol, e.g. 'GOOG'.
        status - Status of the order (Working, Inactive, Filled, Cancelled)
        time - Placing time
        action - 'BOT' (for long) or 'SLD' (for short)
            or 'EXIT' (for liquidation).
        price - Activation price
        quantity - The quantity of shares to transact.
        """
        self.type = OrderType.STOP
        self.id = id
        self.ticker = ticker
        self.status = status
        self.time = time
        self.action = action
        self.price = price
        self.quantity = quantity

class LimitOrder(object):
    """
    a Limit order is generated when trading with limit orders orders or
    when a stop loss or take profit is defined.
    """
    def __init__(self, id, ticker, status, time, action, price, quantity=0):
        """
        Initialises the LimitOrder.
        The OrderManager object will "fill in" the correct
        value prior to sending the StopdOrder to the
        ExecutionHandler.

        Parameters:
        id - The order id
        ticker - The ticker symbol, e.g. 'GOOG'.
        status - Status of the order (Working, Inactive, Filled, Cancelled)
        time - Placing time
        action - 'BOT' (for long) or 'SLD' (for short)
            or 'EXIT' (for liquidation).
        price - Activation price
        quantity - The quantity of shares to transact.
        """
        self.type = OrderType.LIMIT
        self.id = id
        self.ticker = ticker
        self.status = status
        self.time = time
        self.action = action
        self.price = price
        self.quantity = quantity
