from itrader import config, logger
from .portfolio import Portfolio

#TODO: import OrderEvent.Executed

class PortfolioHandler(object):
	"""
	The PortfolioHandler is designed to manage all 
	the portfolios owned by an user.

	Each PortfolioHandler contains several Portfolio objects
	and methods to generate, modify or delete portfolios.

	It also handles order events generated by
	the OrderHandler or by a client application.
	"""
	def __init__(self):
		self.portfolios = {}
		

	def on_fill(self, order_event):
		"""
		This is called by the event manager when an order 
		is executed by the ExecutionHandler.
		It takes a OrderEvent, generate a transaction and 
		update the correct Portfolio object.
		"""
		#TODO: instead of calling the function generate the transaction here
		self._convert_fill_to_portfolio_update(order_event) 
		logger.info('PORTFOLIO HANDLER: Executing transaction for Portfolio %s', 
			  order_event.portfolio_id)

	def update_portfolio_value(self, bar_event):
		"""
		Update the portfolio to reflect current market value
		based on the last bar recived.
		"""
		# TODO: not tested. da vedere se serve

		for id, portfolio in self.portfolios.items():
			portfolio.update_market_value(bar_event)

	def create_portfolio(self, user_id, name, cash):
		"""
		Create a new portfolio instance.

		Parameters
		----------
		user_id : `str`
			The portfolio ID string.
		name : `str`, optional
			The optional name string of the portfolio.
		"""
		id = 'xxx' #TODO to be generated automatically somehow
		self.portfolios[id] = Portfolio.create(user_id, name, cash)
		logger.info('PORTFOLIO HANDLER: New Portfolio created - ID %s', id)
		#TODO NOT tested
	
	def delete_portfolio(self, id):
		"""
		Delete a portfolio instance.

		Parameters
		----------
		user_id : `str`
			The portfolio ID string.
		name : `str`, optional
			The optional name string of the portfolio.
		"""

		self.portfolios.pop(id)
		logger.info('PORTFOLIO HANDLER: Portfolio deleted - ID %s', id)
		#TODO NOT tested


	def get_portfolio_metrics(self):
		"""
		Retrive all portfolio metrics in a dictionary
		with portfolio id as keys and metrics as value.

		Returns
		-------
		`dict`
			The portfolio metrics.
		"""
		metrics = {}
		for id, portfolio in self.portfolios.items():
			# TODO: implement a portfolio.to_dict() method
			metrics[id] = {
				'opened_positions' : len(portfolio.pos_handler.positions),
				'total_market_value' : portfolio.total_market_value,
				'available_cash' : portfolio.cash,
				'total_equity' : portfolio.total_equity,
				'total_unrealised_pnl' : portfolio.total_unrealised_pnl,
				'total_realised_pnl' : portfolio.total_realised_pnl,
				'total_pnl' : portfolio.total_pnl
			}
		return metrics

	def get_open_positions(self, portfolio_id):
		"""
		Output the portfolio opened positions for each portfolio as a 
		dictionary portfolio id as keys and ticker as items.

		Returns
		-------
		`dict`
			All portfolio positions.
			{'portfolio_id' : 
				{'ticker' : 
					{'action' : str,
					 'quantity' : float,
					 'unrealised_pnl' : float,
					 'entry_time' : timestamp
					}}}
		"""
		positions = {}
		for id, portfolio in self.portfolios.items():
			positions[id] = portfolio.open_positions()
		return positions
