from queue import Queue
from datetime import datetime
from .portfolio import Portfolio
from itrader.portfolio_handler.transaction import Transaction
from itrader.events_handler.event import BarEvent, FillEvent, PortfolioUpdateEvent

from itrader import config, logger

class PortfolioHandler(object):
	"""
	The PortfolioHandler is designed to manage all 
	the portfolios owned by an user.

	Each PortfolioHandler contains several Portfolio objects
	and methods to generate, modify or delete portfolios.

	It also handles order events generated by
	the OrderHandler or by a client application.
	"""
	def __init__(self, global_queue):
		self.global_queue: Queue = global_queue
		self.current_time = 0
		self.portfolios: dict[str, Portfolio] = {}
		

	def on_fill(self, fill_event: FillEvent):
		"""
		This is called by the event manager when an order 
		is executed by the ExecutionHandler.
		It takes a FillEvent, generate a transaction and 
		update the correct Portfolio object.
		"""
		transaction = Transaction.new_transaction(fill_event)
		portfolio = self.get_portfolio(fill_event.portfolio_id)
		portfolio.process_transaction(transaction)
		#TODO: verify if i need to save the portfolio in the portfolios dict
	
	def generate_portfolios_update_event(self):
		"""
		Generate a PortfolioUpdate event. The data will be used
		by the order handler and strategy handler to keep track of 
		the portfolio metrics.
		"""
		portfolio_update = PortfolioUpdateEvent(
			self.current_time, 
			self.portfolios_to_dict()
			)
		return portfolio_update
	
	def get_portfolio(self, portfolio_id: int):
		"""
		Get the portfolio instance for the given portfolio ID.
		"""
		return self.portfolios.get(portfolio_id)

	def update_portfolios_market_value(self, bar_event: BarEvent):
		"""
		Update the portfolios to reflect current market value
		based on the last bar recived.
		"""
		for id, portfolio in self.portfolios.items():
			portfolio.update_market_value(bar_event)

	def add_portfolio(self, user_id: str, name: str, exchange, cash: float):
		"""
		Create a new portfolio instance.

		Parameters
		----------
		user_id : `str`
			The portfolio ID string.
		name : `str`
			Name of the portfolio.
		cash : `float`
			Initial cash for the portfolio.
		"""
		portfolio = Portfolio(user_id, name, exchange, cash, datetime.utcnow())
		id = portfolio.portfolio_id
		self.portfolios[id] = portfolio

		logger.info('PORTFOLIO HANDLER: New Portfolio created - ID %s', id)
	
	def delete_portfolio(self, id):
		"""
		Delete a portfolio instance.

		Parameters
		----------
		user_id : `str`
			The portfolio ID string.
		name : `str`, optional
			The optional name string of the portfolio.
		"""

		self.portfolios.pop(id)
		logger.info('PORTFOLIO HANDLER: Portfolio deleted - ID %s', id)
		#TODO NOT tested

	def portfolios_to_dict(self):
		"""
		Retrive all portfolio metrics in a dictionary
		with portfolio id as keys and metrics as value.

		Returns
		-------
		`dict`
			The portfolio metrics.
		"""
		portfolios = {}
		for id, portfolio in self.portfolios.items():
			portfolios[id] = portfolio.to_dict()
		return portfolios
