import unittest
from datetime import datetime

from itrader.portfolio_handler.transaction import Transaction, TransactionType
from itrader.portfolio_handler.position import Position, PositionSide


class TestPosition(unittest.TestCase):
	"""
	Test a Position generated by a transaction being processed
	by the portfolio.
	"""

	@classmethod
	def setUpClass(cls):
		"""
		Set up the test data that will be used across all test methods.
		"""
		cls.ticker = 'BTCUSDT'
		cls.strategy_id = 'test_strategy'
		cls.portfolio_id = 'portfolio_id'
	
	def test_short_position_multiple_sell(self):
		time = datetime.now()
		type = TransactionType.SELL
		price = 42000
		quantity = 1
		commission = 0
		sell_transaction = Transaction(time, type, self.ticker, 
								price, quantity, commission,
								self.portfolio_id)
		position = Position.open_position(sell_transaction)
		# Increase Short position
		time = datetime.now()
		type = TransactionType.SELL
		price = 40000
		quantity = 4
		commission = 0
		buy_transaction_2 = Transaction(time, type, self.ticker,
								price, quantity, commission,
								self.portfolio_id)
		position.update_position(buy_transaction_2)

		self.assertIsInstance(position, Position)
		self.assertEqual(position.id, 1)
		self.assertEqual(position.ticker, 'BTCUSDT')
		self.assertEqual(position.portfolio_id, 'portfolio_id')

		self.assertEqual(position.is_open, True)
		self.assertEqual(position.side, PositionSide.SHORT)
		self.assertEqual(position.buy_quantity, 0)
		self.assertEqual(position.sell_quantity, 5)
		self.assertEqual(position.avg_bought, 0)
		self.assertEqual(position.avg_sold, 40400)
		self.assertEqual(position.avg_price, 40400)
		self.assertEqual(position.market_value, 200000)
		self.assertEqual(position.total_bought, 0)
		self.assertEqual(position.total_sold, 202000)
		self.assertEqual(position.net_total, 2000)
		self.assertEqual(position.realised_pnl, 0)
		self.assertEqual(position.unrealised_pnl, 2000)

if __name__ == "__main__":
	unittest.main()